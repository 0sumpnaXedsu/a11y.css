@charset "UTF-8";

/// Defines the language used by `a11y.css`. For now, only `fr` and `en` allowed.
/// @access public
/// @param {String} $language
/// @output Nothing
/// @example scss - Defines the language to `fr`.
///  @include set-locale("fr");
@mixin set-locale($language) {
  $supported-languages: "fr", "en";
  $language: to-lower-case($language);

  @if not index($supported-languages, $language) {
    @error "Language `#{$language}` is not supported. Pull request welcome!";
  }

  $language: $language !global;
}


/// Defines the minimum level used by `a11y.css`.
/// Either:
/// * `error` for errors only;
/// * `warning` for errors and warnings;
/// * `obsolete` for everything but advices;
/// * `advice` for everything.
/// @access public
/// @param {String} $level
/// @output Nothing
/// @example scss - Defines the minimum level to `error` to display only errors.
///  @include set-minimum-level("error");
@mixin set-minimum-level($level) {
  $level: to-lower-case($level);
  $levels: map-keys($themes);

  @if not index($levels, $level) {
    @error "Level `#{$level}` is not supported. Please choose one of `#{$levels}`.";
  }

  $minimum-level: $level !global;
}


/// Get a message from the translation map based on the defined language.
/// The message contains the icon associated to the message type.
/// @access private
/// @group messages
/// @param {String} $theme - Theme name
/// @param {String} $key - Key name
/// @require {function} message
/// @require $themes
/// @output `content`, with `!important`
/// @example scss - Get message for `nav` from `advice` category when language is set to `en`
/// .selector {
///   @include message("advice", "nav");
/// }
/// @example css - Resulting CSS
/// .selector {
///   content: "\2665\00A0 Did you know the <nav> tag is exclusively restricted to primary and secondary navigation area?";
/// }
@mixin message($theme, $key) {
  content: quote(unquote(theme-conf($theme, "icon")) #{message($theme, $key)}) !important;
}


/// Theme mixin extending everything needed for the `$theme`,
/// and including a message in a pseudo-element.
/// @access private
/// @param {String} $theme - Theme
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing (false) - Whether or not to use message on self or next node
/// @requires {mixin} message
/// @requires {function} theme-conf
@mixin item($theme, $key, $self-closing: false) {
  // If it's a self closing tag
  // Include message on next item
  @if $self-closing {
    @extend %a11y-#{$theme}-self-closing;

    &::before,
    & ~ ::after {
      @include message($theme, $key);
    }
  }

  @else {
    @extend %a11y-#{$theme};

    &::before {
      @include message($theme, $key);
    }
  }
}


/// Defines an error
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing (false) - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {function} is-level-enough
/// @example scss - Define an error
/// .selector {
///   @include error("no-src");
/// }
@mixin error($key, $self-closing: false) {
  @if is-level-enough("error") {
    @include item("error", $key, $self-closing);
  }
}


/// Defines a warning
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing (false) - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {function} is-level-enough
/// @example scss - Define an warning
/// .selector {
///   @include warning("abbr");
/// }
@mixin warning($key, $self-closing: false) {
  @if is-level-enough("warning") {
    @include item("warning", $key, $self-closing);
  }
}


/// Defines an obsolete thing
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing (false) - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {function} is-level-enough
/// @example scss - Define an obsolete
/// .selector {
///   @include obsolete("any");
/// }
@mixin obsolete($key, $self-closing: false) {
  @if is-level-enough("obsolete") {
    @include item("obsolete", $key, $self-closing);
  }
}

/// Defines an advice
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing (false) - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {function} is-level-enough
/// @example scss - Define an advice
/// .selector {
///   @include advice("nav");
/// }
@mixin advice($key, $self-closing: false) {
  @if is-level-enough("advice") {
    @include item("advice", $key, $self-closing);
  }
}
